plugins {
  id 'java-library'
  id 'fabric-loom' version '0.2.6-SNAPSHOT'
}

targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = JavaVersion.VERSION_1_8

def createVersion() {
  def parts = []

  if (project.release != 'RELEASE') {
    parts.push project.release
  }

  if (System.env.TRAVIS_BRANCH != null && System.env.TRAVIS_BRANCH != 'master') {
    parts.push System.env.TRAVIS_BRANCH
  }

  if (System.env.TRAVIS_BRANCH != project.minecraft_version) {
    parts.push project.minecraft_version
  }

  def ver = project.version
  if (parts.size > 0) {
    return ver + '-' + parts.join('-')
  }
  return ver
}

version = createVersion()
group = project.group
description = project.displayname
archivesBaseName = project.name

minecraft {
  refmapName = 'bakersd.mixin.refmap.json'
}

// check for updates every build when on CI
if (System.env.CI) {
  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
}

dependencies {
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings "net.fabricmc:yarn:${project.yarn_mappings}"
  modApi "net.fabricmc:fabric-loader:${project.loader_version}"

  compileOnly "com.google.code.findbugs:jsr305:3.0.2"

  modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

  modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
}

processResources {
  inputs.property "version", project.version

  from(sourceSets.main.resources.srcDirs) {
    include "fabric.mod.json"
    expand "version": project.version
  }

  from(sourceSets.main.resources.srcDirs) {
    exclude "fabric.mod.json"
  }

  from 'LICENSE'
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}
